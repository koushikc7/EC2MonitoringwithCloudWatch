#######################################################
# Creation of powershell script for checking disk space
#######################################################
$CheckDiskspaceScript = @"
`$LogDirectory = "C:\Monitoring\logs"
if (-not (Test-Path -Path `$LogDirectory -PathType Container)) {
    New-Item -Path `$LogDirectory -ItemType Directory
}


`$instanceId = Invoke-RestMethod -Uri "http://169.254.169.254/latest/meta-data/instance-id"

`$CurrentDate = Get-Date -Format "ddMMyyyy"
`$OutputFilePath = Join-Path -Path `$LogDirectory -ChildPath "`$CurrentDate.json"

`$DiskSpaceInfo = @()

Get-WmiObject -Class Win32_LogicalDisk | ForEach-Object {
    `$deviceID = `$_.DeviceID
    `$totalSpaceBytes = `$_.Size
    `$freeSpaceBytes = `$_.FreeSpace
    `$usedSpaceBytes = `$totalSpaceBytes - `$freeSpaceBytes

    `$OrderedDiskInfo = [ordered]@{
        "LogTime" = (Get-Date -Format "dd-MM-yyyy HH:mm")
        "InstanceId" = `$instanceId
        "DeviceID" = `$deviceID
        "TotalSpace" = `$totalSpaceBytes
        "FreeSpace" = `$freeSpaceBytes
        "UsedSpace" = `$usedSpaceBytes
    }

    `$JsonContent = `$OrderedDiskInfo | ConvertTo-Json -Compress
    # Log the JSON log entry to the output file on a single line
    `$JsonContent | Out-File -FilePath `$OutputFilePath -Encoding UTF8 -Append
}
"@

# Save the script
$CheckDiskspaceScriptPath = "C:\CheckDiskspaceScript.ps1"

# Convert the configuration to UTF-8 encoding without BOM and save it
[System.IO.File]::WriteAllText($CheckDiskspaceScriptPath, $CheckDiskspaceScript, [System.Text.Encoding]::UTF8)
[System.IO.File]::WriteAllText($CheckDiskspaceScriptPath, $CheckDiskspaceScript)

###################################################################
# Creation of task scheduler for running the script every 5 minutes
###################################################################

$task = "CheckDiskspaceScript"
Get-ScheduledTask -TaskName $task -ErrorAction SilentlyContinue -OutVariable taskStatus1
if ($taskStatus1) { Unregister-ScheduledTask -TaskName $task -Confirm:$false }

$action = New-ScheduledTaskAction -Execute 'C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe' -Argument '-NoProfile -WindowStyle Hidden -file "C:\CheckDiskspaceScript.ps1" '
$trigger = New-ScheduledTaskTrigger -Once -At (Get-Date).AddMinutes(5) -RepetitionInterval (New-TimeSpan -Minutes 5)
$principal = New-ScheduledTaskPrincipal -UserId "NT AUTHORITY\SYSTEM" -LogonType ServiceAccount -RunLevel Highest
$settings = New-ScheduledTaskSettingsSet -Compatibility At -ExecutionTimeLimit (New-TimeSpan -Minutes 15)

Register-ScheduledTask -TaskName $task -Action $action -Principal $principal -Trigger $trigger -Settings $settings

Start-ScheduledTask -TaskName $task

##################################
# Installation of CloudWatch agent
##################################

# Download CloudWatch agent installer
$installerPath = "C:\Temp\AmazonCloudWatchAgent.msi"
Invoke-WebRequest -Uri "https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi" -OutFile $installerPath

# Install CloudWatch agent
Start-Process -FilePath "msiexec.exe" -ArgumentList "/i $installerPath /qn" -Wait

# Retrieve the running EC2 instance ID using instance metadata
$instanceId = Invoke-RestMethod -Uri "http://169.254.169.254/latest/meta-data/instance-id"

# Log group name
$logGroupName = "monitoring/ec2/$instanceId"

$configTemplate = @"
{
	"logs": {
		"logs_collected": {
			"files": {
				"collect_list": [
					{
						"file_path": "C:\\monitoring\\logs\\*",
						"log_group_name": "$logGroupName",
						"log_stream_name": "DiskSpace",
						"retention_in_days": 30
					}
				]
			}
		}
	}
}
"@

# Save the configuration to a file
$agentConfigPath = "C:\Program Files\Amazon\AmazonCloudWatchAgent\config.json"

# Convert the configuration to UTF-8 encoding without BOM and save it
[System.IO.File]::WriteAllText($agentConfigPath, $configTemplate, [System.Text.Encoding]::UTF8)
[System.IO.File]::WriteAllText($agentConfigPath, $configTemplate)

# Go to CloudWatch agent folder and apply the configuration
cd "C:\Program Files\Amazon\AmazonCloudWatchAgent"
.\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c file:config.json -s
# $cwAgentInstallPath = "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" 
# Invoke-Expression -Command "$scriptPath"

# Set CloudWatch agent to start automatically on boot
Set-Service -Name "AmazonCloudWatchAgent" -Status running -StartupType automatic